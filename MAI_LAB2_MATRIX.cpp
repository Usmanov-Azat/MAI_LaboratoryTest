/***************************************************
*                                                  *
*             Программирование на языке            *
*                 высокого уровня                  *
*--------------------------------------------------*
*Project type : Win32 Console Application          *
*Project name :Двумерные массивы         	       *
*Language : C++ VS 2019                            *
*File name : main.cpp                              *
* Programmer : M3O - 107б - 19                     *
*                Усманов Азат Ризович			   *
*Modified by :                                     *
*Created : 06.05.2020                              *
*Last revision : 06.05.2020                        *
*Comment(s) : Программа для поиска суммы           *
положительных элементов под главной диагональю     *
и  максимума среди четных элементов матрицы        *
****************************************************/
#include<iostream>//Стандартные потоки ввода/вывода
#include<fstream>//файловые потоки ввода/вывода
using namespace std;//пространство имен std

const char* fname1 = "Test01.txt";//Задаем имя файла 1
const char* fname2 = "Test02.txt";//Задаем имся файла 2
const char* matrixname1 = "Матрица 1";//Задаем название матрицы 1
const char* matrixname2 = "Матрица 2";//Задаем название матрицы 2
const int SIZE1 = 20;//Максимальная размерность 1-ой матрицы
const int SIZE2 = 20;//Максимальная размерность 2-ой матрицы


/****************************************************************

 * П Р О Т О Т И П Ы   Ф У Н К Ц И Й *

 ****************************************************************/

int str(const char* fnamex);//Прототип функции,считывающей кол-во строк в матрице
int cols(const char* fnamex);//Прототип функции,считывающей кол-во стобцов в матрице
int diag(const char* FNAMEx, int matrix[][SIZE1], int Nx, int Mx);/*Прототип фунции,проверяющий файл на корректность
и обеспечивающий запись элементов из файла в массив*/
void SumPos(int azat[][SIZE1], int N, int M);/*Прототип функции,которая находит сумму положительных элементов под главной
диагональю*/
void chet(int matrix[][SIZE1], int N, int M);//Прототип функции,которая находим максимум среди четных элементов матрицы
void Print_Matr(int matrix[][SIZE1], int N, int M, const char* matrixname);//Прототип функции,выводящей матрицу на печать
/****************************************************************/

/* О С Н О В Н А Я П Р О Г Р А М М А */

/**************************************************************/
int main() {
	setlocale(LC_ALL, "Russian");
	system("color F0");
	int matrix1[SIZE1][SIZE1];//Задаем первый статический двумерный массив для записи в него элементов матрицы
	int matrix2[SIZE2][SIZE2];//Задаем второй статический двумерный массив для записи в него элементов матрицы
	int N1 = 0;//Реально количество строк в 1-ой матрице
	int M1 = 0;//Реально количество столбцов в 1-ой матрице
	int N2 = 0;//Реально количество строк в 2-ой матрице
	int M2 = 0;//Реально количество столбцов в 2-ой матрице
	int errcode = 0;//Обнуляем значение переменной,в которую будет возращаться значение из функций
	N1 = str(fname1);//Выхов функции,которая определяет кол-во строк в первой матрице
	M1 = cols(fname1);//Вызов функции,которая определяет кол-во столбцов в первой матрице
	errcode = diag(fname1, matrix1, N1, M1);/*Вызов фунции,которая проверяет первый файл на корректность и записывает матрицы из первого
	файла в первый двумерный статический массив*/
	//Если вовзращаемое значение не равно нулю,завершаем работу программы
	if (errcode != 0) {
		return 6;
	}
	Print_Matr(matrix1, N1, M1, matrixname1);//Вызов функции,которая выводит первый двумерный статический массив на печать
	SumPos(matrix1, N1, M1);//Вызов функции,которая находит сумму положительных элементов под главной диагональю первой матрицы
	chet(matrix1, N1, M1);//Вызов функции,которая находит максимум среди четных элементов первой матрицы
	N2 = str(fname2);//Вызов функции,которая определяет кол-во строк во второй матрице
	M2 = cols(fname2);//Вызов функции,которая определяет кол-во столбцов во второй матрице
	errcode = diag(fname2, matrix2, N1, M1);/*Вызов фунции,которая проверяет второй файл на корректность и
	записывает элементы матрицы из второго файла во второй двумерный статический массив*/
	//Если вовзращаемое значение не равно нулю,завершаем работу программы
	if (errcode != 0) {
		return 7;
	}
	Print_Matr(matrix2, N2, M2, matrixname2);////Вызов функции,которая выводит второй двумерный статический массив на печать
	SumPos(matrix2, N2, M2);//Вызов фунции,которая находит сумму положительных элементов под главной диагональю второй матрицы
	chet(matrix2, N2, M2);//Вызов функции,которая находит максимум среди четных элементов второй матрицы

}

/***********************************************************

* Р Е А Л И З А Ц И Я Ф У Н К Ц И Й *

************************************************************/

//Реализация функции,которая определяет кол-во строк в матрице
int str(const char* fnamex)
{// start function
	int Nx;//Количество строк в данной матрице
	ifstream fin(fnamex);
	fin >> Nx;
	return Nx;
}//end function

//Реализация функции,которая определяет кол-во столбцов в матрице
int cols(const char* fnamex)
{// start function

	int Mx;//Количесвто столбцов в данной матрице
	ifstream fin(fnamex);
	fin >> Mx;
	fin >> Mx;
	return Mx;
}//end function

//Реализация функции проверки файла на корректность и записи элементов матрицы в двумерный статический массив
int diag(const char* FNAMEx, int matrix[][SIZE1], int Nx, int Mx) {// start function

	int i = 0;//Счетчик
	int j = 0;//Счетчик
	ifstream fin(FNAMEx);
	if (!fin)
	{
		cout << "Файл " << FNAMEx << " не найден\n";
		fin.close();      //закрыть файл

		return 1;         //выход по ошибке
	} // end if
	  //файл существует, можно из него читать
	fin >> Nx;
	fin >> Mx;

	if (fin.eof()) 	//файл пуст
	{
		cout << "Файл " << FNAMEx << " пустой или не до конца заполнен\n";
		fin.close();    //закрыть файл

		return 2;   //выход по ошибке
	} // end if
	if (fin.fail()) //в файле не число
	{
		cout << "ОШИБКА! Сбой при чтении файла " << FNAMEx << endl;
		fin.close();    //закрыть файл

		return 3;       //выход по ошибке
	} // end if

	if (Nx != Mx) //Если матрица не квадратная
	{
		cout << "Ошибка!Матрица должна быть квадратной\n";
		fin.close();
		system("pause");
		return 4;
	}

	//считывание элементов первой матрицы
	for (i = 0; i < Nx; i++)//по строкам
	{
		for (j = 0; j < Mx; j++)//по столбцам
		{

			fin >> matrix[i][j];
			if (fin.fail()) // если число в файле не целое или оно отсутствует
			{
				cout << "Ошибка! число в файле не целое или оно отсутствует\n";
				return 5;
			}
		}
	}// end for

	return 0;
	fin.close();      //закрыть файл

}//end function


//Реализация фунции,которая находит сумму положительных элементов под главной диагональю
void SumPos(int matrix[][SIZE1], int N, int M)
{// start function

	int n = 1;//Количество элементов,которые находятся под главной диагональю,во второй строке
	int sum = 0;//Сумма положительных элементов,которые находятся под главной диагональю 
	//Поиск положительного элемента под главной диагональю и последующее суммирование её с подобными элементами
	for (int i = 1;i < N;i++) {


		for (int j = 0;j < n;j++) {
			if (matrix[i][j] > 0)
				sum += matrix[i][j];

		}//end for по строке

		n++;/*Увеличение счетчика кол-ва элементов под главной диагональю,так как в последующих строках
	элементов на один больше*/

	}//end for по столбцу


	//Если значение суммы равно нулю
	if (sum != 0) {
		cout << "Сумма положительных элементов,которые находятся под главной диагональю равна:" << " " << sum;
	}
	//Если значение суммы больше нуля
	else {
		cout << "Под главной диагональю нет положительных элементов\n";
	}



}//end fuction
//Реализация фукнции,которая ищет максимум среди четных элементов матрицы
void chet(int matrix[][SIZE1], int N, int M)
{// start function
	bool flag = true;// Первый четный элемент не зафиксирован

	int max = -1;//Максимальный четный элемент матрицы
	//Цикл по поиску первого четного элемента
	for (int i = 0;i < N;i++) {
		for (int j = 0;j < M;j++) {
			//Если элемент матрицы четный
			if (matrix[i][j] % 2 == 0) {//if

				max = matrix[i][j];//Присваиваим значение первого четного элемента
				flag = false;//Первый четный элемент зафиксирован
				break;//Выходим из цикла по столбцам
			}//end if
		}//end for по столбцам

		//Если первый четный элемент зафиксирован
		if (flag = false) {//if
			break;//Выходим из цикла по строкам
		}//end if

	}//end for по строкам

	 //Если в матрице есть четный элемент
	if (max != -1) {
		//Цикл,который сравнивает первый четный элемент с остальными четными элементами матрицы
		for (int i = 0;i < N;i++) {//for по строкам
			for (int j = 0;j < M;j++) {//for по столбцам
				//Если текущий элемент матрицы больше первого четного элемента матрица
				if ((matrix[i][j] % 2 == 0) && (matrix[i][j] > max)) {//if
					max = matrix[i][j];//Присваиваем значение текущего элемента
				}//end if
			}//end for по столбцам
		}//end for по строкам


		cout << "Наибольший четный элемент матрицы равен: " << max << endl << endl;
	}
	//Если в матрице нет четного элемента
	else {
		cout << "В данной матрице нет четных элементов\n\n";
	}





}//end function 

//Реализация функции,которая выводит матрицу на печать
void Print_Matr(int matrix[][SIZE1], int N, int M, const char* matrixname) {// start function
	cout << matrixname << " " << "[" << N << "]" << "[" << M << "]:" << endl;//Вывод названия и размерности матрицы
	for (int i = 0;i < N;i++) {//for по строкам
		for (int j = 0;j < M;j++) {//for по столбцам
			cout << matrix[i][j] << " ";//Вывод текущего элемента
		}//end for по столбцам
		cout << endl;//Переход курсора на следующую строку
	}//end for по строкам

}//end function







